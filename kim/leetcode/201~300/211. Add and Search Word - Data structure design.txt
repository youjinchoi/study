https://leetcode.com/problems/add-and-search-word-data-structure-design/

public class WordDictionary {
    class TrieNode {
        public TrieNode[] children;
        public bool isWord;
        
        public TrieNode()
        {
            children = new TrieNode['z' - 'a' + 1];
            isWord = false;
        }
    }

    private TrieNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void AddWord(string word) {
        TrieNode node = root;
        foreach(char c in word)
        {
            if(node.children[c - 'a'] == null)
            {
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public bool Search(string word) {
        return SearchRecursion(root, word, 0);
    }
    
    private bool SearchRecursion(TrieNode node, string word, int index) {
        if(word.Length == index)
        {
            return node.isWord;
        }
        
        if(word[index] == '.') {
            foreach(TrieNode childNode in node.children)
            {
                if(childNode != null && SearchRecursion(childNode, word, index + 1))
                {
                    return true;
                }
            }
        }
        else
        {
            if(node.children[word[index] - 'a'] != null && SearchRecursion(node.children[word[index] - 'a'], word, index +1)){
                return true;
            }
        }
        return false;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.AddWord(word);
 * bool param_2 = obj.Search(word);
 */
https://leetcode.com/problems/merge-two-sorted-lists/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
//O(n + m)
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode current = head;
        while(l1 != null && l2 != null)
        {
            if(l1.val < l2.val)
            {
                current.next = l1;
                l1 = l1.next;
            }
            else
            {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        current.next = l1 == null ? l2 : l1;
        return head.next;
    }
}

/*
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null && l2 != null)
        {
            return l2;
        }
        if(l1 != null && l2 == null)
        {
            return l1;
        }
        if(l1 == null && l2 == null)
        {
            return null;
        }
        ListNode head = new ListNode(0);
        ListNode current = head;
        while(l1 != null && l2 != null)
        {
            if(l1.val < l2.val)
            {
                current.next = new ListNode(l1.val);
                l1 = l1.next;
            }
            else
            {
                current.next = new ListNode(l2.val);
                l2 = l2.next;
            }
            current = current.next;
        }
        if(l1 == null) current.next = l2;
        if(l2 == null) current.next = l1;
        return head.next;
    }
}

public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null && l2 != null)
        {
            return l2;
        }
        if(l1 != null && l2 == null)
        {
            return l1;
        }
        if(l1 == null && l2 == null)
        {
            return null;
        }
        ListNode p1 = l1;
        ListNode p1Prev = null;
        ListNode p2 = l2;
        
        while(p1 != null && p2 != null)
        {
            if(p1.val < p2.val)
            {
                p1Prev = p1;
                p1 = p1.next;
            }
            else
            {
                if(p1Prev != null)
                {
                    p1Prev.next = p2;
                }
                p1Prev = p2;
                p2 = p2.next;
                p1Prev.next = p1;
            }
        }    
        if(p1 == null)
        {
            p1Prev.next = p2;
        }
        
        return l1.val < l2.val ? l1 : l2; 
    }
}
*/
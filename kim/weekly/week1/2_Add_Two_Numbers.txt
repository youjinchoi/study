https://leetcode.com/problems/add-two-numbers/

C#

/* 
ListNode starts from last digit to first
which is same order of summing numbers greater than 10
just mind that there is carry if sum of two digits are more than 10 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null && l2 != null)
        {
            int sum = l1 + l2 + carry;                             <------error
            carry = sum / 10;
            current.next = new ListNode(sum % 10); // remainder
            current = current.next;
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}



public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null && l2 != null)
        {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10); // remainder
            current = current.next;
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}          =>> time limit exceeded


test case
[2,4,3]
[5,6,4]

public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null && l2 != null)
        {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10); // remainder
            current = current.next;
            l1 = l1.next;
            l2 = l2.next;                                    <==== stupid
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}

wrong answer
Input
[1,8]
[0]
Output
[1]
Expected
[1,8]

--> didn't care the case if one of ListNode is longer than other

public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null && l2 != null)
        {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10); // remainder
            current = current.next;
            l1 = l1.next == null ? 0 : l1.next;
            l2 = l2.next == null ? 0 : l2.next;
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}

==> compile error

public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null || l2 != null)
        {
            l1Val = (l1 != null ? l1.val : 0);   ==> l1Val didn't exist
            l2Val = (l2 != null ? l2.val : 0);
            int sum = l1Val + l2Val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10); // remainder
            current = current.next;
            l1 = (l1.next == null ? null : l1.next);
            l2 = (l2.next == null ? null : l2.next);
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}


public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null || l2 != null)
        {
            int l1Val = (l1 != null ? l1.val : 0); 
            int l2Val = (l2 != null ? l2.val : 0);
            int sum = l1Val + l2Val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
            if(l1.next == null && l2.next == null)
            {
                break;
            }
            if(l1.next != null)
            {
                l1 = l1.next;
            }
            if(l2.next != null)
            {
                l2 = l2.next;
            }
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}

Input
[9,8]
[1]
Output
[0,0,1]
Expected
[0,9]

public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null && l2 != null)
        {
            int sum = l1.val + l2.val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        if(l1 == null)
        {
            while(l2 != null)
            {
                int sum = l2.val + carry;
                carry = sum / 10;
                current.next = new ListNode(sum % 10);
                current = current.next;
                l2 = l2.next;
            }
        }
        else if(l2 == null)
        {
            while(l1 != null)
            {
                int sum = l1.val + carry;
                carry = sum / 10;
                current.next = new ListNode(sum % 10);
                current = current.next;
                l1 = l1.next;
            }
        }

        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}

Pass..... 

public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null || l2 != null)
        {
            int l1Val = (l1 != null ? l1.val : 0); 
            int l2Val = (l2 != null ? l2.val : 0);
            int sum = l1Val + l2Val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
            if(l1.next == null && l2.next == null)
            {
                break;
            }
            if(l1.next != null)  ======> why!!!
            {
                l1 = l1.next;
            }
            if(l2.next != null)   =====> why!!!
            {
                l2 = l2.next;
            }
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}


public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        var head = new ListNode(0);
        var current = head;
        int carry = 0;
        while(l1 != null || l2 != null)
        {
            int l1Val = (l1 != null ? l1.val : 0); 
            int l2Val = (l2 != null ? l2.val : 0);
            int sum = l1Val + l2Val + carry;
            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
            if(l1 != null)
            {
                l1 = l1.next;
            }
            if(l2 != null)
            {
                l2 = l2.next;
            }
        }
        if(carry != 0)
        {
            current.next = new ListNode(carry);
        }

        return head.next;
    }
}

Time :O(n) n: number of listnode of longer one.
Space : O(n + 1) +1: because carry can be 1 at the end.